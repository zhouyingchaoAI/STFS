from enum import Enum

class WeatherType(Enum):
    """天气类型编号枚举 - 合并为15类用于地铁客流预测"""

    # 保持原有枚举名称，但将value合并为15类
    多云____多云 = 1  # 多云类
    晴____晴 = 0  # 晴天类
    多云____中雨 = 4  # 中雨类
    阴____阴 = 2  # 阴天类
    小雨____小雨 = 3  # 小雨类
    小雨____阴 = 2  # 阴天类（转阴）
    小雨____多云 = 3  # 小雨类（以小雨为主）
    中雨____中雨 = 4  # 中雨类
    多云____小雨 = 3  # 小雨类（转小雨）
    小雨____中雨 = 4  # 中雨类（转中雨）
    小雨____小雪 = 8  # 小雪类
    大雪____阴 = 2  # 阴天类（转阴）
    中雨____雨夹雪 = 4  # 中雨类（以中雨为主）
    小雪____阴 = 2  # 阴天类（转阴）
    雨夹雪____大雪 = 10  # 大雪类
    多云____阴 = 1  # 多云类（以多云为主）
    雨夹雪____雨夹雪 = 12  # 雨夹雪类
    雨夹雪____阴 = 2  # 阴天类（转阴）
    阴____雨夹雪 = 12  # 雨夹雪类（转雨夹雪）
    大雪____大雪 = 10  # 大雪类
    阴____多云 = 1  # 多云类（转多云）
    中雨____多云 = 1  # 多云类（转多云）
    晴____多云 = 0  # 晴天类（以晴为主）
    中雨____小雨 = 3  # 小雨类（转小雨）
    多云____晴 = 0  # 晴天类（转晴）
    小雨____大雨 = 5  # 大雨类
    大雨____阴 = 2  # 阴天类（转阴）
    中雨____阴 = 2  # 阴天类（转阴）
    中雨____大雨 = 4  # 中雨类（以中雨为主）
    大雨____大雨 = 5  # 大雨类
    小雨____晴 = 0  # 晴天类（转晴）
    中雨____暴雨 = 4  # 中雨类（以中雨为主）
    阴____晴 = 0  # 晴天类（转晴）
    阴____小雨 = 3  # 小雨类（转小雨）
    阴____中雨 = 4  # 中雨类（转中雨）
    小雨____雨夹雪 = 12  # 雨夹雪类
    大雨____小雨 = 3  # 小雨类（转小雨）
    晴____阴 = 0  # 晴天类（以晴为主）
    多云____大雨 = 5  # 大雨类
    晴____中雨 = 0  # 晴天类（以晴为主）
    大雨____中雨 = 4  # 中雨类（转中雨）
    阵雨____多云 = 7  # 阵雨类
    阵雨____晴 = 0  # 晴天类（转晴）
    晴____小雨 = 0  # 晴天类（以晴为主）
    阵雨____小雨 = 7  # 阵雨类
    雨夹雪____暴雪 = 11  # 暴雪类
    中雪____多云 = 1  # 多云类（转多云）
    晴____雨夹雪 = 0  # 晴天类（以晴为主）
    冻雨____阴 = 2  # 阴天类（转阴）
    冻雨____冻雨 = 13  # 冻雨类
    冻雨____雨夹雪 = 13  # 冻雨类（以冻雨为主）
    雨夹雪____小雪 = 8  # 小雪类
    小雪____多云 = 1  # 多云类（转多云）
    雨夹雪____小雨 = 3  # 小雨类（转小雨）
    暴雨____中雨 = 4  # 中雨类（转中雨）
    大雨____暴雨 = 5  # 大雨类（以大雨为主）
    暴雨____暴雨 = 6  # 暴雨类
    暴雨____小雨 = 3  # 小雨类（转小雨）
    大雨____多云 = 1  # 多云类（转多云）
    小雨____暴雨 = 6  # 暴雨类
    未知 = 14  # 未知天气

    @classmethod
    def get_all_types(cls):
        """获取所有天气类型编号"""
        return [weather.value for weather in cls]

    @classmethod
    def get_weather_by_name(cls, name: str):
        """通过原始名称获取天气类型枚举，无法查到的返回未知"""
        mapping = {
            "多云 /  多云": cls.多云____多云,
            "晴 /  晴": cls.晴____晴,
            "多云 /  中雨": cls.多云____中雨,
            "阴 /  阴": cls.阴____阴,
            "小雨 /  小雨": cls.小雨____小雨,
            "小雨 /  阴": cls.小雨____阴,
            "小雨 /  多云": cls.小雨____多云,
            "中雨 /  中雨": cls.中雨____中雨,
            "多云 /  小雨": cls.多云____小雨,
            "小雨 /  中雨": cls.小雨____中雨,
            "小雨 /  小雪": cls.小雨____小雪,
            "大雪 /  阴": cls.大雪____阴,
            "中雨 /  雨夹雪": cls.中雨____雨夹雪,
            "小雪 /  阴": cls.小雪____阴,
            "雨夹雪 /  大雪": cls.雨夹雪____大雪,
            "多云 /  阴": cls.多云____阴,
            "雨夹雪 /  雨夹雪": cls.雨夹雪____雨夹雪,
            "雨夹雪 /  阴": cls.雨夹雪____阴,
            "阴 /  雨夹雪": cls.阴____雨夹雪,
            "大雪 /  大雪": cls.大雪____大雪,
            "阴 /  多云": cls.阴____多云,
            "中雨 /  多云": cls.中雨____多云,
            "晴 /  多云": cls.晴____多云,
            "中雨 /  小雨": cls.中雨____小雨,
            "多云 /  晴": cls.多云____晴,
            "小雨 /  大雨": cls.小雨____大雨,
            "大雨 /  阴": cls.大雨____阴,
            "中雨 /  阴": cls.中雨____阴,
            "中雨 /  大雨": cls.中雨____大雨,
            "大雨 /  大雨": cls.大雨____大雨,
            "小雨 /  晴": cls.小雨____晴,
            "中雨 /  暴雨": cls.中雨____暴雨,
            "阴 /  晴": cls.阴____晴,
            "阴 /  小雨": cls.阴____小雨,
            "阴 /  中雨": cls.阴____中雨,
            "小雨 /  雨夹雪": cls.小雨____雨夹雪,
            "大雨 /  小雨": cls.大雨____小雨,
            "晴 /  阴": cls.晴____阴,
            "多云 /  大雨": cls.多云____大雨,
            "晴 /  中雨": cls.晴____中雨,
            "大雨 /  中雨": cls.大雨____中雨,
            "阵雨 /  多云": cls.阵雨____多云,
            "阵雨 /  晴": cls.阵雨____晴,
            "晴 /  小雨": cls.晴____小雨,
            "阵雨 /  小雨": cls.阵雨____小雨,
            "雨夹雪 /  暴雪": cls.雨夹雪____暴雪,
            "中雪 /  多云": cls.中雪____多云,
            "晴 /  雨夹雪": cls.晴____雨夹雪,
            "冻雨 /  阴": cls.冻雨____阴,
            "冻雨 /  冻雨": cls.冻雨____冻雨,
            "冻雨 /  雨夹雪": cls.冻雨____雨夹雪,
            "雨夹雪 /  小雪": cls.雨夹雪____小雪,
            "小雪 /  多云": cls.小雪____多云,
            "雨夹雪 /  小雨": cls.雨夹雪____小雨,
            "暴雨 /  中雨": cls.暴雨____中雨,
            "大雨 /  暴雨": cls.大雨____暴雨,
            "暴雨 /  暴雨": cls.暴雨____暴雨,
            "暴雨 /  小雨": cls.暴雨____小雨,
            "大雨 /  多云": cls.大雨____多云,
            "小雨 /  暴雨": cls.小雨____暴雨,
        }
        return mapping.get(name, cls.未知)

# 15个简化天气类型说明
SIMPLIFIED_WEATHER_TYPES = {
    0: "晴天",      # 对客流影响最小
    1: "多云",      # 轻微影响客流
    2: "阴天",      # 轻度影响客流
    3: "小雨",      # 中等影响客流
    4: "中雨",      # 较大影响客流
    5: "大雨",      # 严重影响客流
    6: "暴雨",      # 极大影响客流
    7: "阵雨",      # 不确定影响客流
    8: "小雪",      # 中等影响客流
    9: "中雪",      # 较大影响客流（当前数据中未使用）
    10: "大雪",     # 严重影响客流
    11: "暴雪",     # 极大影响客流
    12: "雨夹雪",   # 复杂影响客流
    13: "冻雨",     # 危险天气，严重影响客流
    14: "未知"      # 未知影响
}

def get_weather_type_name(value: int) -> str:
    """根据天气类型值获取天气名称"""
    return SIMPLIFIED_WEATHER_TYPES.get(value, "未知")

def get_weather_impact_level(value: int) -> str:
    """获取天气对地铁客流的影响程度"""
    impact_mapping = {
        0: "最小影响",    # 晴天
        1: "轻微影响",    # 多云
        2: "轻度影响",    # 阴天
        3: "中等影响",    # 小雨
        4: "较大影响",    # 中雨
        5: "严重影响",    # 大雨
        6: "极大影响",    # 暴雨
        7: "不确定影响",  # 阵雨
        8: "中等影响",    # 小雪
        9: "较大影响",    # 中雪
        10: "严重影响",   # 大雪
        11: "极大影响",   # 暴雪
        12: "复杂影响",   # 雨夹雪
        13: "危险影响",   # 冻雨
        14: "未知影响"    # 未知
    }
    return impact_mapping.get(value, "未知影响")